[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "slack-my-conversation"
version = "1.0.0"
description = "特定のユーザーのSlackメッセージを効率的に取得・保存するPythonツール"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [
    { name = "System I" }
]
keywords = ["slack", "api", "messages", "conversation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]

dependencies = [
    "requests>=2.32.4",
    "python-dotenv>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.9.4",
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.0",
    "pytest-asyncio>=0.25.2",
    "pytest-mock>=3.15.0",
    "pre-commit>=4.1.0",
    "types-requests>=2.32.0.20250117",
]

[project.scripts]
slack-messages = "app.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

# Ruff設定
[tool.ruff]
target-version = "py313"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "TRY",    # tryceratops
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "TRY003", # long messages outside exception class
    "TRY300", # consider moving statement to else block
    "B008",   # function calls in argument defaults
    "RUF001", # string contains ambiguous unicode (日本語対応)
    "RUF002", # docstring contains ambiguous unicode (日本語対応)
    "RUF003", # comment contains ambiguous unicode (日本語対応)
    "PTH123", # builtin open() - Path.open() preferred but not enforced
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# mypy設定
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = "dotenv"
ignore_missing_imports = true

# pytest設定
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

